# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet doc "/// <summary> ... </summary>" b
/// <summary>
/// $0
/// </summary>
endsnippet

snippet prop "Property" b
public ${1:int} ${2:PropertyName} { get; set; }
endsnippet

snippet propback "Property with backing field" b
public ${1:int} ${2:PropertyName}
{
	get => $2_;
	set => $2_ = value;
}
private $1 $2_;
endsnippet

snippet propnotify "property with INotifyPropertyChanged" b
public ${1:int} ${2:PropertyName}
{
	get => $2_;
	set
	{
		if ($2_ == value) return;
		$2_ = value;
		RaisePropertyChanged();
	}
}
private $1 $2_;
endsnippet

snippet propdp "Two-way DependencyProperty" b
public ${1:int} ${2:PropertyName}
{
	get => ($1)GetValue($2Property);
	set => SetValue($2Property, value);
}

public static readonly DependencyProperty $2Property =
	DependencyProperty.Register(
		"$2", typeof($1),
		typeof(${3:ownclass}),
		new FrameworkPropertyMetadata(
			${4:0},
			FrameworkPropertyMetadataOptions.BindsTwoWayByDefault));
endsnippet

snippet inotifypropertychanged "INotifyPropertyChanged" b
#region INotifyPropertyChanged
public event PropertyChangedEventHandler PropertyChanged;
private void RaisePropertyChanged([CallerMemberName] string name = "") =>
	PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
#endregion
endsnippet
