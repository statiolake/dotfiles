# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet derives "usual derives" b
#[derive(Debug${1:, Clone}${2:, Copy}${3:, PartialEq, Eq, Hash}${4:, PartialOrd, Ord})]
endsnippet

snippet impldisplay "impl fmt::Display" b
impl fmt::Display for ${1:type} {
	fn fmt(&self, b: &mut fmt::Formatter) -> fmt::Result {
		write!(b, $0)
	}
}
endsnippet

snippet implop "impl op" b
impl ${1:Add}Assign${2:<RHS>} for ${3:type} {
	fn `!p snip.rv=t[1].lower()`_assign(&mut self, rhs: `!p snip.rv="Self" if t[2] == "" else t[2][1:-1]`) {
		$0
	}
}

impl $1$2 for $3 {
	type Output = $3;
	fn `!p snip.rv=t[1].lower()`(mut self, rhs: `!p snip.rv="Self" if t[2] == "" else t[2][1:-1]`) -> $3 {
		self `!p m={'Add':'+=','Sub':'-=','Mul':'*=','Div':'/=','Rem':'%='}; snip.rv=m.get(t[1], '<OP>')` rhs;
		self
	}
}
endsnippet

snippet add_xorshiftrng "XorShiftRng" b
struct XorShiftRng {
	x: Wrapping<u32>,
	y: Wrapping<u32>,
	z: Wrapping<u32>,
	w: Wrapping<u32>,
}

impl RngCore for XorShiftRng {
	fn next_u32(&mut self) -> u32 {
		let x = self.x;
		let t = x ^ (x << 11);
		self.x = self.y;
		self.y = self.z;
		self.z = self.w;
		let w = self.w;
		self.w = w ^ (w >> 19) ^ (t ^ (t >> 8));
		self.w.0
	}

	fn next_u64(&mut self) -> u64 {
		let x = u64::from(self.next_u32());
		let y = u64::from(self.next_u32());
		(y << 32) | x
	}

	fn fill_bytes(&mut self, dest: &mut [u8]) {
		let mut left = dest;
		while left.len() >= 8 {
			let (l, r) = { left }.split_at_mut(8);
			left = r;
			let chunk: [u8; 8] = self.next_u64().to_le_bytes();
			l.copy_from_slice(&chunk);
		}
		let n = left.len();
		if n > 4 {
			let chunk: [u8; 8] = self.next_u64().to_le_bytes();
			left.copy_from_slice(&chunk[..n]);
		} else if n > 0 {
			let chunk: [u8; 4] = self.next_u32().to_le_bytes();
			left.copy_from_slice(&chunk[..n]);
		}
	}

	fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> {
		self.fill_bytes(dest);
		Ok(())
	}
}

impl SeedableRng for XorShiftRng {
	type Seed = [u8; 16];

	fn from_seed(seed: Self::Seed) -> Self {
		let mut seed_u32 = [0u32; 4];
		assert_eq!(seed.len(), size_of::<u32>() * seed_u32.len());

		unsafe {
			copy_nonoverlapping(seed.as_ptr(), seed_u32.as_mut_ptr() as *mut u8, seed.len());
		}
		for v in seed_u32.iter_mut() {
			*v = v.to_le();
		}

		// Xorshift cannot be seeded with 0 and we cannot return an Error, but
		// also do not wish to panic (because a random seed can legitimately be
		// 0); our only option is therefore to use a preset value.
		if seed_u32.iter().all(|&x| x == 0) {
			seed_u32 = [0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED, 0xBAD_5EED];
		}

		XorShiftRng {
			x: Wrapping(seed_u32[0]),
			y: Wrapping(seed_u32[1]),
			z: Wrapping(seed_u32[2]),
			w: Wrapping(seed_u32[3]),
		}
	}

	fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
		let mut b = [0u8; 16];
		loop {
			rng.try_fill_bytes(&mut b[..])?;
			if !b.iter().all(|&x| x == 0) {
				break;
			}
		}

		Ok(XorShiftRng {
			x: Wrapping(u32::from_le_bytes([b[0], b[1], b[2], b[3]])),
			y: Wrapping(u32::from_le_bytes([b[4], b[5], b[6], b[7]])),
			z: Wrapping(u32::from_le_bytes([b[8], b[9], b[10], b[11]])),
			w: Wrapping(u32::from_le_bytes([b[12], b[13], b[14], b[15]])),
		})
	}
}

endsnippet
